package tn.esprit.spring.kaddem.services;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import tn.esprit.spring.kaddem.entities.Contrat;
import tn.esprit.spring.kaddem.entities.Etudiant;
import tn.esprit.spring.kaddem.repositories.ContratRepository;
import tn.esprit.spring.kaddem.repositories.EtudiantRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ContratServiceImplTest {

    @Mock
    private ContratRepository contratRepository;

    @Mock
    private EtudiantRepository etudiantRepository;

    @InjectMocks
    private ContratServiceImpl contratService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRetrieveAllContrats() {
        List<Contrat> contrats = new ArrayList<>();
        contrats.add(new Contrat(1, "Contrat A", new Etudiant(), null, null));
        contrats.add(new Contrat(2, "Contrat B", new Etudiant(), null, null));

        when(contratRepository.findAll()).thenReturn(contrats);

        List<Contrat> result = contratService.retrieveAllContrats();

        assertEquals(2, result.size());
        verify(contratRepository, times(1)).findAll();
    }

    @Test
    void testAddContrat() {
        Contrat contrat = new Contrat(1, "Contrat A", new Etudiant(), null, null);
        when(contratRepository.save(contrat)).thenReturn(contrat);

        Contrat result = contratService.addContrat(contrat);

        assertNotNull(result);
        assertEquals("Contrat A", result.getNomContrat());
        verify(contratRepository, times(1)).save(contrat);
    }

    @Test
    void testRetrieveContrat() {
        Integer contratId = 1;
        Contrat contrat = new Contrat(contratId, "Contrat A", new Etudiant(), null, null);

        when(contratRepository.findById(contratId)).thenReturn(Optional.of(contrat));

        Contrat result = contratService.retrieveContrat(contratId);

        assertNotNull(result);
        assertEquals(contratId, result.getIdContrat());
        verify(contratRepository, times(1)).findById(contratId);
    }

    @Test
    void testRemoveContrat() {
        Integer contratId = 1;
        Contrat contrat = new Contrat(contratId, "Contrat A", new Etudiant(), null, null);
        when(contratRepository.findById(contratId)).thenReturn(Optional.of(contrat));

        contratService.removeContrat(contratId);

        verify(contratRepository, times(1)).delete(contrat);
    }

    @Test
    void testAffectContratToEtudiant() {
        Integer contratId = 1;
        String nomE = "Nom";
        String prenomE = "Prenom";
        Etudiant etudiant = new Etudiant();
        Contrat contrat = new Contrat(contratId, "Contrat A", etudiant, null, null);

        when(etudiantRepository.findByNomEAndPrenomE(nomE, prenomE)).thenReturn(etudiant);
        when(contratRepository.findByIdContrat(contratId)).thenReturn(contrat);

        Contrat result = contratService.affectContratToEtudiant(contratId, nomE, prenomE);

        assertNotNull(result);
        verify(etudiantRepository, times(1)).findByNomEAndPrenomE(nomE, prenomE);
        verify(contratRepository, times(1)).findByIdContrat(contratId);
        verify(contratRepository, times(1)).save(contrat);
    }

}
